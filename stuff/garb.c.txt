
/*
volatile static int capture_channels_sm;
volatile static int play_channels_sm;

    while (true)
    {
        if (!pio_sm_is_rx_fifo_empty(pio0, capture_channels_sm))
        {
            captures[circular_index] = pio_sm_get_blocking(pio0, capture_channels_sm);
            circular_index = (circular_index + 1) % number_of_captures;

            // Detectar disparo
            if (!triggered && !gpio_get(21))
            {
                triggered = true;
                trigger_index = circular_index;
                post_trigger_captured = 0;
            }
            else if (triggered)
            {
                // Contar muestras luego del trigger
                post_trigger_captured++;
                if (post_trigger_captured >= (number_of_captures - window_size))
                {
                    break;
                }
            }
        }
    }

    {
        uint32_t temp[number_of_captures];
        unsigned int start_pre = (trigger_index + number_of_captures - window_size) % number_of_captures;
        unsigned int idx = 0;

        for (unsigned int i = 0; i < window_size; i++)
        {
            temp[idx++] = captures[(start_pre + i) % number_of_captures];
        }

        for (unsigned int i = 0; i < (number_of_captures - window_size); i++)
        {
            temp[idx++] = captures[(trigger_index + i) % number_of_captures];
        }

        for (unsigned int i = 0; i < number_of_captures; i++)
        {
            captures[i] = temp[i];
        }
    }

    printf("Capture complete.\r\n");

    printf("Playing %d captures in loop\r\n", number_of_captures);
    while (1)
    {
        for (int j = 0; j < number_of_captures; j++)
        {
            pio_sm_put_blocking(pio0, play_channels_sm, captures[j]);
        }
        sleep_ms(3000);
        break;
    }

    while (1)
    {
        tight_loop_contents();
    }

void OLDcore1_main()
{
    puts("Core 1 started");
    pio_destroy();

    gpio_init(CLOCK_GPIO);
    gpio_set_dir(CLOCK_GPIO, GPIO_IN);
    gpio_pull_up(CLOCK_GPIO);

    sleep_ms(1000);

    while (gpio_get(CLOCK_GPIO))
        ;
    while (1)
    {
        if (gpio_get(CLOCK_GPIO))
        {
            uint32_t start = time_us_32();
            while (gpio_get(CLOCK_GPIO))
            {
                tight_loop_contents();
            }
            uint32_t end = time_us_32();
            if (end - start < 20)
            {
                printf("[CORE1] glitch positive pulse detected: %d us (or less)\r\n", end - start);
            }
            while (!gpio_get(CLOCK_GPIO))
            {
                tight_loop_contents();
            }
        }
    }
}

    unsigned int trigger_pin = 0;
    unsigned int trigger_pin_play = 1;
    unsigned int first_gpio = 20;
    unsigned int first_output_pin = 8;
    unsigned int nr_channels = 2;
    float speed_hz = 125000000.0; // 125000000 hz == 125mhz
    bool pull_ups = true;

    // init trigger pin
    gpio_init(trigger_pin);
    gpio_set_dir(trigger_pin, GPIO_IN);
    gpio_pull_up(trigger_pin);

    gpio_init(trigger_pin_play);
    gpio_set_dir(trigger_pin_play, GPIO_OUT);
    gpio_put(trigger_pin_play, true);

    pio_destroy();

    // init GPIOS as input
    for (unsigned int i = 0; i < nr_channels; i++)
    {
        gpio_init(first_gpio + i);
        gpio_set_dir(first_gpio + i, GPIO_IN);
        if (pull_ups)
        {
            gpio_pull_up(first_gpio + i);
        }
    }

    for (size_t i = 0; i < nr_channels; i++)
    {
        gpio_init(first_output_pin + i);
        gpio_set_dir(first_output_pin + i, GPIO_OUT);
        gpio_put(first_output_pin + i, false);
        pio_gpio_init(pio0, first_output_pin + i);
    }

    float clkdiv = 6.0f;

    capture_channels_sm = pio_claim_unused_sm(pio0, true);
    uint offset_capture_channels = pio_add_program(pio0, &capture_channels_program);
    pio_sm_set_consecutive_pindirs(pio0, capture_channels_sm, first_gpio, nr_channels, false);
    pio_sm_config c_capture_channels = capture_channels_program_get_default_config(offset_capture_channels);
    sm_config_set_in_pins(&c_capture_channels, first_gpio);
    sm_config_set_in_shift(&c_capture_channels, false, true, nr_channels);
    sm_config_set_jmp_pin(&c_capture_channels, trigger_pin);
    sm_config_set_fifo_join(&c_capture_channels, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c_capture_channels, clkdiv);
    pio_sm_init(pio0, capture_channels_sm, offset_capture_channels, &c_capture_channels);
    pio_sm_set_enabled(pio0, capture_channels_sm, false);
    pio_sm_clear_fifos(pio0, capture_channels_sm);
    pio_sm_restart(pio0, capture_channels_sm);
    pio_sm_clkdiv_restart(pio0, capture_channels_sm);
    pio_sm_set_enabled(pio0, capture_channels_sm, true);
    pio_sm_exec(pio0, capture_channels_sm, pio_encode_jmp(offset_capture_channels));

    play_channels_sm = pio_claim_unused_sm(pio0, true);
    uint offset_play_channels = pio_add_program(pio0, &play_channels_program);
    pio_sm_set_consecutive_pindirs(pio0, play_channels_sm, first_output_pin, nr_channels, true);
    pio_sm_config c_play_channels = play_channels_program_get_default_config(offset_play_channels);
    sm_config_set_out_pins(&c_play_channels, first_output_pin, nr_channels);
    sm_config_set_out_shift(&c_play_channels, true, true, nr_channels);
    sm_config_set_jmp_pin(&c_play_channels, trigger_pin_play);
    sm_config_set_fifo_join(&c_play_channels, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c_play_channels, clkdiv);
    pio_sm_init(pio0, play_channels_sm, offset_play_channels, &c_play_channels);
    pio_sm_set_enabled(pio0, play_channels_sm, false);
    pio_sm_clear_fifos(pio0, play_channels_sm);
    pio_sm_restart(pio0, play_channels_sm);
    pio_sm_clkdiv_restart(pio0, play_channels_sm);
    pio_sm_set_enabled(pio0, play_channels_sm, true);
    pio_sm_exec(pio0, play_channels_sm, pio_encode_jmp(offset_play_channels));

    gpio_put(trigger_pin_play, false);












#define CLOCK_GPIO 21
#define DAT_GPIO 20
#define SIDESET_BASE_GPIO 18

    gpio_init(CLOCK_GPIO);
    gpio_set_dir(CLOCK_GPIO, GPIO_IN);
    gpio_pull_up(CLOCK_GPIO);

    gpio_init(DAT_GPIO);
    gpio_set_dir(DAT_GPIO, GPIO_IN);
    gpio_pull_up(DAT_GPIO);

    gpio_init(CLOCK_GPIO + 1);
    gpio_set_dir(CLOCK_GPIO + 1, GPIO_OUT);
    gpio_put(CLOCK_GPIO + 1, false);
    pio_gpio_init(pio0, CLOCK_GPIO + 1);

    gpio_init(SIDESET_BASE_GPIO);
    gpio_set_dir(SIDESET_BASE_GPIO, GPIO_OUT);
    gpio_put(SIDESET_BASE_GPIO, false);
    pio_gpio_init(pio0, SIDESET_BASE_GPIO);

    gpio_init(SIDESET_BASE_GPIO + 1);
    gpio_set_dir(SIDESET_BASE_GPIO + 1, GPIO_OUT);
    gpio_put(SIDESET_BASE_GPIO + 1, false);
    pio_gpio_init(pio0, SIDESET_BASE_GPIO + 1);

    int glitch_fast_rise_sm = pio_claim_unused_sm(pio0, true);
    uint offset_glitch_fast_rise = pio_add_program(pio0, &glitch_fast_rise_program);
    pio_sm_set_consecutive_pindirs(pio0, glitch_fast_rise_sm, CLOCK_GPIO, 2, false);
    pio_sm_set_consecutive_pindirs(pio0, glitch_fast_rise_sm, SIDESET_BASE_GPIO, 2, true);
    pio_sm_config c_glitch_fast_rise = glitch_fast_rise_program_get_default_config(offset_glitch_fast_rise);
    sm_config_set_in_pins(&c_glitch_fast_rise, CLOCK_GPIO);
    sm_config_set_in_shift(&c_glitch_fast_rise, false, true, 32);
    sm_config_set_jmp_pin(&c_glitch_fast_rise, CLOCK_GPIO);
    sm_config_set_sideset_pins(&c_glitch_fast_rise, SIDESET_BASE_GPIO);
    sm_config_set_fifo_join(&c_glitch_fast_rise, PIO_FIFO_JOIN_RX);
    // 4 MHZ
    sm_config_set_clkdiv(&c_glitch_fast_rise, (float)clock_get_hz(clk_sys) / 4000000.0f);
    pio_sm_init(pio0, glitch_fast_rise_sm, offset_glitch_fast_rise, &c_glitch_fast_rise);

    pio_sm_set_enabled(pio0, glitch_fast_rise_sm, false);
    pio_sm_clear_fifos(pio0, glitch_fast_rise_sm);
    pio_sm_restart(pio0, glitch_fast_rise_sm);
    pio_sm_clkdiv_restart(pio0, glitch_fast_rise_sm);

pio_sm_set_enabled(pio0, glitch_fast_rise_sm, true);

while (1)
{
    tight_loop_contents();
}

int fast_rise_counter_sm = pio_claim_unused_sm(pio0, true);
uint offset_fast_rise_counter = pio_add_program(pio0, &fast_rise_counter_program);
pio_sm_set_consecutive_pindirs(pio0, fast_rise_counter_sm, SIDESET_BASE_GPIO, 4, false);
pio_sm_set_consecutive_pindirs(pio0, fast_rise_counter_sm, CLOCK_GPIO + 1, 1, true);
pio_sm_config c_fast_rise_counter = fast_rise_counter_program_get_default_config(offset_fast_rise_counter);
sm_config_set_in_pins(&c_fast_rise_counter, SIDESET_BASE_GPIO);
sm_config_set_in_shift(&c_fast_rise_counter, false, true, 32);
sm_config_set_jmp_pin(&c_fast_rise_counter, CLOCK_GPIO);
sm_config_set_sideset_pins(&c_fast_rise_counter, CLOCK_GPIO + 1);
sm_config_set_out_pins(&c_fast_rise_counter, CLOCK_GPIO + 1, 1);
sm_config_set_fifo_join(&c_fast_rise_counter, PIO_FIFO_JOIN_RX);
// 250mhz
sm_config_set_clkdiv(&c_fast_rise_counter, 1.0f);
pio_sm_init(pio0, fast_rise_counter_sm, offset_fast_rise_counter, &c_fast_rise_counter);
pio_sm_set_enabled(pio0, fast_rise_counter_sm, false);
pio_sm_clear_fifos(pio0, fast_rise_counter_sm);
pio_sm_restart(pio0, fast_rise_counter_sm);
pio_sm_clkdiv_restart(pio0, fast_rise_counter_sm);
pio_sm_set_enabled(pio0, fast_rise_counter_sm, true);

*/

; MIT License - okhi - Open Keylogger Hardware Implant
; ---------------------------------------------------------------------------
; Copyright (c) [2024] by David Reguera Garcia aka Dreg
; https://github.com/therealdreg/pico-ps2-diagnostic-tool
; https://www.rootkit.es
; X @therealdreg
; dreg@rootkit.es
; ---------------------------------------------------------------------------
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.
; ---------------------------------------------------------------------------
; WARNING: BULLSHIT CODE X-)
; ---------------------------------------------------------------------------

; Dreg's note: I have tried to document everything as best as possible and make the code and project
; as accessible as possible for beginners. There may be errors (I am a lazy bastard using COPILOT)
; if you find any, please make a PR

; I'm still a novice with the Pico SDK & RP2040, so please bear with me if there are unnecessary things ;-)

; I want to avoid mental uncertainty when solving problems and knowing where things are,
; so ALL the programs in PIO0/1 are in the same place and order in each execution.


; ---- PIO0 AREA ---------------------------------------------------------------------

.program sample_channels
; PIO0_0, Speed setting from user input

; AUTOPUSH TRUE, TRESHOLD 32
; FIFO_JOIN_RX: RX FIFO length: 8, TX FIFO is disabled
; IN PIN 0...8: CHANNEL 0 ...8
; JMP PIN: TRIGGER
wait_trigger:
    ;jmp pin, wait_trigger
.wrap_target
    in pins, 2 ; modify this from MCU
.wrap

.program play_channels
; PIO0_0, Speed setting from user input

; AUTOPULL TRUE, TRESHOLD 32
; FIFO_JOIN_RX: RX FIFO length: 8, TX FIFO is disabled
; IN PIN 0...8: CHANNEL 0 ...8
; JMP PIN: TRIGGER
wait_trigger:
    jmp pin, wait_trigger
.wrap_target
    out pins, 2 ; modify this from MCU
.wrap


.program glitch_fast_rise
; PIO???, Must run at 4 MHz (each instruction takes 0.25 µs)

; It detects very short pulses ("glitches") on a clock input pin, measuring
; from a falling edge to the next rising edge. Glitches of ~10 µs or shorter
; are considered detected.

;   - We need to observe a ~10 µs window, which corresponds to ?? instructions
;     at 4 MHz (40 × 0.25 µs = 10 µs).
;   - The loop uses 20 iterations, each taking 2 instructions,
;     resulting in a total of 40 instructions for the detection window.
;   - If the clock pin goes HIGH during these iterations, we register it
;     as a glitch.

;    Normal clock (no glitch):
;        ___          _________          ________
; CLOCK:    |________|         |________|        |________
;
;    With a short glitch
;        ___          __  _____          _________
; CLOCK:    |________|  ||     |________|         |________
;                         ↑
;                       short glitch (~10 µs)

; The PIO program detects this fast rise (transition to HIGH)
; happening sooner than expected, which qualifies it as a glitch.

; AUTOPUSH must be true, 32 bit threshold
; FIFO JOIN RX, TX disabled
; IN PIN 0: CLOCK
; IN PIN 1: COUNTER READY
; JMP PIN: CLOCK
; SIDE 0: START PIO COUNTER FLAG
; SIDE 1: THIS IS A GLITCH TO NOTIFY FLAGS
.side_set 2 opt
.wrap_target
init_detection:
    nop [3] side 0b00
stuck:
    jmp stuck side 0b01
    wait 1 pin 1 side 0b01
    set x, 20                   ; 00 Initialize X for 20 loop iterations
    wait 1 pin 0                ; 01 Ensure the CLOCK pin goes HIGH first (avoids false triggers)
    wait 0 pin 0                ; 02 Now wait until the CLOCK pin goes LOW (start point for measuring)
check_for_glitch:
    jmp pin, glitch_detected    ; 03 If the pin transitions HIGH prematurely, it's a glitch
    jmp x--, check_for_glitch   ; 04 If still LOW, repeat up to 20 times
    jmp init_detection          ; 05 No glitch detected in this window; restart
glitch_detected:
    in x, 32          side 0b10 ; 06 Read the CLOCK pin to register the glitch event
.wrap                           ; Restart program


.program fast_rise_counter
; SPEED: 250Mhz (each instruction takes 4 ns)

; PRECISION COUNTER 8 ns, two instruction in loop with counter

; FIFO JOIN RX, TX disabled
; AUTOPUSH TRUE, TRESHOLD 32
; IN PIN 0: SIGNAL TO NOTIFY OR NOT
; IN PIN 1: SIGNAL TO START
; IN PIN 2: DAT
; IN PIN 3: CLOCK
; JMP PIN: CLOCK
.side_set 1 opt
.wrap_target
start_again:
    mov x, !null side 1
stuck:
    jmp stuck
    wait 1 pin 1 ; wait to start from other PIO
    wait 1 pin 3 ; wait for clock high
    wait 0 pin 3 side 0 ; wait for clock low
count:
    jmp pin, end
    jmp x--, count ; count each 8 ns, two instructions (loop) at 250 MHz take 8 ns
    jmp start_again
end:
    wait 0 pin 1
    mov isr, null
    in pins, 1
    mov y, isr
    jmp !y, start_again
    mov isr, null
    in x, 32
.wrap